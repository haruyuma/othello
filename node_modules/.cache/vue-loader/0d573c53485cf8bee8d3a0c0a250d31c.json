{"remainingRequest":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\src\\components\\PlayOthello.vue?vue&type=style&index=0&id=7465fac2&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\src\\components\\PlayOthello.vue","mtime":1663158001092},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgdGFibGUgewogICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICB9CgogIHRkIHsKICAgIGJvcmRlcjogM3B4IHNvbGlkIGJsYWNrOwogICAgYmFja2dyb3VuZDogIzAwOUU1NDsKICAgIHdpZHRoOiA1MHB4OwogICAgaGVpZ2h0OiA1MHB4OwogICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICB9CgogIC5oZWxsb3sKICAgIHdpZHRoOjgwMHB4OyBoZWlnaHQ6MjAwcHg7IG1hcmdpbjphdXRvOyBtYXJnaW4tdG9wOiAwJTsKICB9CgogICNza2lwewogICAgYmFja2dyb3VuZDpibHVlOwogICAgY29sb3I6d2hpdGU7CiAgICBwYWRkaW5nOjIwcHggMjBweDsKICAgIGJvcmRlci1yYWRpdXM6OHB4OwogIH0gIAoKICAjcmVzZXR7CiAgICBiYWNrZ3JvdW5kOmdyZWVueWVsbG93OwogICAgY29sb3I6YmxhY2s7CiAgICBwYWRkaW5nOjIwcHggMjBweDsKICAgIGJvcmRlci1yYWRpdXM6OHB4OwogICAgbWFyZ2luLWxlZnQ6NTBweAogIH0gIAoK"},{"version":3,"sources":["C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\src\\components\\PlayOthello.vue"],"names":[],"mappings":";EAyQE,CAAC,CAAC,CAAC,CAAC,EAAE;IACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3B;;EAEA,CAAC,EAAE;IACD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACxB;;EAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EACxD;;EAEA,CAAC,CAAC,CAAC,CAAC,CAAC;IACH,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACf,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACnB;;EAEA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACtB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACjB","file":"C:/Users/kazu/Study/VUEJS/CLI/othellogame2/src/components/PlayOthello.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"hello\" style=\"padding:2% 0%;\">\n    <div class=\"centerMiddle\">\n      <table class=\"inner\" style=\"margin-bottom:10px\">\n        <tr v-for=\"y in size\" :key=\"y\">\n          <td v-for=\"x in size\" @click=\"onStoneSet(x, y)\" :key=\"x\">\n            <stone :type=\"getStone(x, y)\"></stone>\n          </td>\n        </tr>\n      </table>\n\n    </div>\n    \n    <span style=\"background:#d8bfd8;padding:20px 20px; margin:50px;border-radius:8px;\">\n      <stone :type=\"currentStoneId\"></stone> の番\n    </span>\n    <button id=\"skip\" @click=\"this.currentStoneId = this.currentStoneId * -1\">スキップ</button>\n    <button id=\"reset\" @click=\"reset()\">リセット</button>\n  </div>\n</template>\n\n<script>\nimport stoneComponent from \"./stoneComponent.vue\"\n\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  components: {\n    stone: stoneComponent,\n  },\n  data(){\n    return{\n      size: 14,\n      stones: [],\n      currentStoneId: -1,    // -1 => 黒い石、1 => 白い石,\n      result:0,\n      init:0,\n    }\n  },\n  methods:{\n    initStone() {\n      var stones = [];\n      var size = this.size;\n      this.init = 1;\n      for(var x = 0 ; x < size ; x++) {\n        var stoneLine = [];\n        for(var y = 0 ; y < size ; y++) {\n          if( (x==6 && y==6) || (x==7 && y==7) ){\n            stoneLine.push(-1);  \n          }else if( (x==7 && y==6) || (x==6 && y==7) ){\n            stoneLine.push(1);\n          }else{\n            stoneLine.push(0);\n          }\n        }\n        stones.push(stoneLine);\n      }\n      this.stones = stones;\n    },\n\n    getStone(x, y) {\n      return this.stones[x-1][y-1];        \n    },\n\n    reset() {\n      var stones = [];\n      var size = this.size;\n      this.init = 1;\n      for(var x = 0 ; x < size ; x++) {\n        var stoneLine = [];\n        for(var y = 0 ; y < size ; y++) {\n          if( (x==6 && y==6) || (x==7 && y==7) ){\n            stoneLine.push(-1);  \n          }else if( (x==7 && y==6) || (x==6 && y==7) ){\n            stoneLine.push(1);\n          }else{\n            stoneLine.push(0);\n          }\n        }\n        stones.push(stoneLine);\n      }\n      this.stones = stones;\n    },\n\n    copyStone() {     \n//      return JSON.parse(JSON.stringify(this.stones));\n      return this.stones;\n    },\n\n    changeStone(x, y) { // 同じ色で挟まれた場合にひっくり返す\n      var movingCollection = [    // 移動する方向\n        {x: -1, y: -1}, // 左上\n        {x:  0, y: -1}, // 上\n        {x:  1, y: -1}, // 右上\n        {x:  1, y:  0}, // 右\n        {x:  1, y:  1}, // 右下\n        {x:  0, y:  1}, // 下\n        {x: -1, y:  1}, // 左下\n        {x: -1, y:  0}, // 左\n      ];\n      var baseX = x - 1;  // 置かれた石の座標：X\n      var baseY = y - 1;  // 置かれた石の座標：Y\n      var changingStoneId = this.currentStoneId * -1;    // ひっくり返す石\n\n      for(var i = 0 ; i < movingCollection.length ; i++) {    //movingCollection.length:8\n        var moving = movingCollection[i];\n        var checkingX = baseX;\n        var checkingY = baseY;\n        var changingPositions = [];     // ひっくり返す（かもしれない）座標\n\n        innerLoop:\n        for(var j = 0 ; j < this.size ; j++) {  //置いた場所の周囲をチェック\n          checkingX += moving.x;   // チェックする場所を移動\n          checkingY += moving.y;   // チェックする場所を移動\n          if( checkingX < 0 ||\n              checkingY < 0 ||\n              checkingX >= this.size ||\n              checkingY >= this.size) {   // 盤上を出た\n          break innerLoop;\n          }\n          var checkingStoneId = this.stones[checkingX][checkingY];\n          if(checkingStoneId == this.currentStoneId) {   // 自分の色だった場合\n            var newStones = this.copyStone();\n            for(var k = 0 ; k < changingPositions.length ; k++) {\n              var changingPosition = changingPositions[k];\n              var changingX = changingPosition.x;\n              var changingY = changingPosition.y;\n              newStones[changingX][changingY] = this.currentStoneId;\n            }\n            this.stones = newStones;\n            break innerLoop;\n          }else if(checkingStoneId == changingStoneId) {   // 相手の色だった場合\n            changingPositions.push({x: checkingX, y: checkingY});\n          }else{    // 空白の場合\n            break innerLoop;\n          }\n        }\n      }\n    },\n\n    checkStone(x, y) { // 同じ色で挟まれた場合にひっくり返す\n      var movingCollection = [    // 移動する方向\n        {x: -1, y: -1}, // 左上\n        {x:  0, y: -1}, // 上\n        {x:  1, y: -1}, // 右上\n        {x:  1, y:  0}, // 右\n        {x:  1, y:  1}, // 右下\n        {x:  0, y:  1}, // 下\n        {x: -1, y:  1}, // 左下\n        {x: -1, y:  0}, // 左\n      ];\n      var baseX = x - 1;  // 置かれた石の座標：X\n      var baseY = y - 1;  // 置かれた石の座標：Y\n      var changingStoneId = this.currentStoneId * -1;    // ひっくり返す石\n      var sameColor = 0;\n      var differentColor = 0;\n\n      for(var i = 0 ; i < movingCollection.length ; i++) {    //movingCollection.length:8\n        var moving = movingCollection[i];\n        var checkingX = baseX;\n        var checkingY = baseY;\n\n        innerLoop:\n        for(var j = 0 ; j < this.size ; j++) {  //置いた場所の周囲をチェック\n          checkingX += moving.x;   // チェックする場所を移動\n          checkingY += moving.y;   // チェックする場所を移動\n          if( checkingX < 0 ||\n              checkingY < 0 ||\n              checkingX >= this.size ||\n              checkingY >= this.size) {   // 盤上を出た\n              if(sameColor != 1){\n                differentColor = 0;\n              }\n          break innerLoop;\n          }\n\n          var checkingStoneId = this.stones[checkingX][checkingY];\n          if(checkingStoneId == this.currentStoneId) {   // 自分の色だった場合\n            if(differentColor == 1){\n              sameColor = 1;\n            }else{\n              differentColor = 0;  \n            }\n            break innerLoop;\n          }else if(checkingStoneId == changingStoneId) {   // 相手の色だった場合\n            differentColor = 1;\n          }\n          else{    // 空白の場合\n            if( (differentColor!=1) || (sameColor!=1) ){\n              differentColor = 0;\n              sameColor = 0;\n            }\n            break innerLoop;\n          }\n        }\n      }\n      if( (sameColor == 1)  &&  (differentColor == 1) ){\n        this.result = 1;\n      }else{\n        this.result = 0;\n      }\n      return this.result;\n    },\n\n    stoneCounts() {\n      var counts = {\n          black: 0,\n          white: 0,\n          total: 0\n      };\n      var size = this.size;\n      for(var x = 0 ; x < size ; x++) {\n        for(var y = 0 ; y < size ; y++) {\n          var stoneId = this.stones[x][y];\n          if(stoneId == -1 || stoneId == 1) {\n            if(stoneId == -1) {\n              counts.black++;\n            } else if(stoneId == 1) {\n              counts.white++;\n            }\n            counts.total++;\n          }\n        }\n      }\n      return counts;\n    },\n\n    onStoneSet(x, y) {\n      this.init = 0;\n      var chechResult = this.checkStone(x, y);\n      if(chechResult == 1){\n        if(this.stones[x-1][y-1] == 0) {    // 選んだ場所が空白かどうか？\n          var newStones = this.copyStone();\n          newStones[x-1][y-1] = this.currentStoneId;\n          this.stones = newStones;      \n            this.changeStone(x, y);\n          this.currentStoneId *= -1;  // 白黒交代\n          var fullCount = this.size * this.size;\n          var stoneCounts = this.stoneCounts();\n          if(stoneCounts.total == fullCount) {\n            if(stoneCounts.black > stoneCounts.white) {\n              alert(\"黒の勝ち\");\n            } else if(stoneCounts.black < stoneCounts.white) {\n              alert(\"白の勝ち\");\n            } else {\n              alert(\"引き分け\");\n            }\n          }\n//        } else {\n//          alert('すでに石が置かれています');\n        }\n      }\n    },\n  },\n\n  created:function() {\n      this.initStone();\n  },\n}//methods\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  table {\n    border-collapse: collapse;\n  }\n\n  td {\n    border: 3px solid black;\n    background: #009E54;\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    vertical-align: middle;\n  }\n\n  .hello{\n    width:800px; height:200px; margin:auto; margin-top: 0%;\n  }\n\n  #skip{\n    background:blue;\n    color:white;\n    padding:20px 20px;\n    border-radius:8px;\n  }  \n\n  #reset{\n    background:greenyellow;\n    color:black;\n    padding:20px 20px;\n    border-radius:8px;\n    margin-left:50px\n  }  \n\n</style>\n"]}]}