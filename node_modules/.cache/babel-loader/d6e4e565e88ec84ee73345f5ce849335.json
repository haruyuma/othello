{"remainingRequest":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\templateLoader.js??ref--6!C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\index.js??ref--1-1!C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\src\\components\\PlayOthello.vue?vue&type=template&id=7465fac2&scoped=true","dependencies":[{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\src\\components\\PlayOthello.vue","mtime":1663158001092},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\babel.config.js","mtime":1663084950182},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVuZGVyTGlzdCBhcyBfcmVuZGVyTGlzdCwgRnJhZ21lbnQgYXMgX0ZyYWdtZW50LCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlRWxlbWVudEJsb2NrIGFzIF9jcmVhdGVFbGVtZW50QmxvY2ssIHJlc29sdmVDb21wb25lbnQgYXMgX3Jlc29sdmVDb21wb25lbnQsIGNyZWF0ZVZOb2RlIGFzIF9jcmVhdGVWTm9kZSwgY3JlYXRlRWxlbWVudFZOb2RlIGFzIF9jcmVhdGVFbGVtZW50Vk5vZGUsIGNyZWF0ZVRleHRWTm9kZSBhcyBfY3JlYXRlVGV4dFZOb2RlLCBwdXNoU2NvcGVJZCBhcyBfcHVzaFNjb3BlSWQsIHBvcFNjb3BlSWQgYXMgX3BvcFNjb3BlSWQgfSBmcm9tICJ2dWUiOwoKY29uc3QgX3dpdGhTY29wZUlkID0gbiA9PiAoX3B1c2hTY29wZUlkKCJkYXRhLXYtNzQ2NWZhYzIiKSwgbiA9IG4oKSwgX3BvcFNjb3BlSWQoKSwgbik7Cgpjb25zdCBfaG9pc3RlZF8xID0gewogIGNsYXNzOiAiaGVsbG8iLAogIHN0eWxlOiB7CiAgICAicGFkZGluZyI6ICIyJSAwJSIKICB9Cn07CmNvbnN0IF9ob2lzdGVkXzIgPSB7CiAgY2xhc3M6ICJjZW50ZXJNaWRkbGUiCn07CmNvbnN0IF9ob2lzdGVkXzMgPSB7CiAgY2xhc3M6ICJpbm5lciIsCiAgc3R5bGU6IHsKICAgICJtYXJnaW4tYm90dG9tIjogIjEwcHgiCiAgfQp9Owpjb25zdCBfaG9pc3RlZF80ID0gWyJvbkNsaWNrIl07CmNvbnN0IF9ob2lzdGVkXzUgPSB7CiAgc3R5bGU6IHsKICAgICJiYWNrZ3JvdW5kIjogIiNkOGJmZDgiLAogICAgInBhZGRpbmciOiAiMjBweCAyMHB4IiwKICAgICJtYXJnaW4iOiAiNTBweCIsCiAgICAiYm9yZGVyLXJhZGl1cyI6ICI4cHgiCiAgfQp9OwoKY29uc3QgX2hvaXN0ZWRfNiA9IC8qI19fUFVSRV9fKi9fY3JlYXRlVGV4dFZOb2RlKCIg44Gu55WqICIpOwoKZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcihfY3R4LCBfY2FjaGUsICRwcm9wcywgJHNldHVwLCAkZGF0YSwgJG9wdGlvbnMpIHsKICBjb25zdCBfY29tcG9uZW50X3N0b25lID0gX3Jlc29sdmVDb21wb25lbnQoInN0b25lIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soImRpdiIsIF9ob2lzdGVkXzEsIFtfY3JlYXRlRWxlbWVudFZOb2RlKCJkaXYiLCBfaG9pc3RlZF8yLCBbX2NyZWF0ZUVsZW1lbnRWTm9kZSgidGFibGUiLCBfaG9pc3RlZF8zLCBbKF9vcGVuQmxvY2sodHJ1ZSksIF9jcmVhdGVFbGVtZW50QmxvY2soX0ZyYWdtZW50LCBudWxsLCBfcmVuZGVyTGlzdCgkZGF0YS5zaXplLCB5ID0+IHsKICAgIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVFbGVtZW50QmxvY2soInRyIiwgewogICAgICBrZXk6IHkKICAgIH0sIFsoX29wZW5CbG9jayh0cnVlKSwgX2NyZWF0ZUVsZW1lbnRCbG9jayhfRnJhZ21lbnQsIG51bGwsIF9yZW5kZXJMaXN0KCRkYXRhLnNpemUsIHggPT4gewogICAgICByZXR1cm4gX29wZW5CbG9jaygpLCBfY3JlYXRlRWxlbWVudEJsb2NrKCJ0ZCIsIHsKICAgICAgICBvbkNsaWNrOiAkZXZlbnQgPT4gJG9wdGlvbnMub25TdG9uZVNldCh4LCB5KSwKICAgICAgICBrZXk6IHgKICAgICAgfSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X3N0b25lLCB7CiAgICAgICAgdHlwZTogJG9wdGlvbnMuZ2V0U3RvbmUoeCwgeSkKICAgICAgfSwgbnVsbCwgOCwgWyJ0eXBlIl0pXSwgOCwgX2hvaXN0ZWRfNCk7CiAgICB9KSwgMTI4KSldKTsKICB9KSwgMTI4KSldKV0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJzcGFuIiwgX2hvaXN0ZWRfNSwgW19jcmVhdGVWTm9kZShfY29tcG9uZW50X3N0b25lLCB7CiAgICB0eXBlOiAkZGF0YS5jdXJyZW50U3RvbmVJZAogIH0sIG51bGwsIDgsIFsidHlwZSJdKSwgX2hvaXN0ZWRfNl0pLCBfY3JlYXRlRWxlbWVudFZOb2RlKCJidXR0b24iLCB7CiAgICBpZDogInNraXAiLAogICAgb25DbGljazogX2NhY2hlWzBdIHx8IChfY2FjaGVbMF0gPSAkZXZlbnQgPT4gdGhpcy5jdXJyZW50U3RvbmVJZCA9IHRoaXMuY3VycmVudFN0b25lSWQgKiAtMSkKICB9LCAi44K544Kt44OD44OXIiksIF9jcmVhdGVFbGVtZW50Vk5vZGUoImJ1dHRvbiIsIHsKICAgIGlkOiAicmVzZXQiLAogICAgb25DbGljazogX2NhY2hlWzFdIHx8IChfY2FjaGVbMV0gPSAkZXZlbnQgPT4gJG9wdGlvbnMucmVzZXQoKSkKICB9LCAi44Oq44K744OD44OIIildKTsKfQ=="},{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;EAAQC,KAAsB,EAAtB;IAAA;EAAA;;;EACZD,KAAK,EAAC;;;EACFA,KAAK,EAAC;EAAQC,KAA0B,EAA1B;IAAA;EAAA;;;;EAUjBA,KAA4E,EAA5E;IAAA;IAAA;IAAA;IAAA;EAAA;;;iDACkC;;;;;uBAb1CC,oBAiBM,KAjBN,cAiBM,CAhBJC,oBASM,KATN,cASM,CARJA,oBAMQ,OANR,cAMQ,oBALND,oBAIKE,SAJL,EAIK,IAJL,EAIKC,YAJWC,UAIX,EAJMC,CAAS,IAAR;yBAAZL,oBAIK,IAJL,EAIK;MAJkBM,GAAG,EAAED;IAIvB,CAJL,EAA6B,oBAC3BL,oBAEKE,SAFL,EAEK,IAFL,EAEKC,YAFWC,UAEX,EAFMG,CAAS,IAAR;2BAAZP,oBAEK,IAFL,EAEK;QAFkBQ,OAAK,YAAEC,oBAAWF,CAAX,EAAcF,CAAd,CAEzB;QAF4CC,GAAG,EAAEC;MAEjD,CAFL,GACEG,aAAsCC,gBAAtC,EAAsC;QAA9BC,IAAI,EAAEH,kBAASF,CAAT,EAAYF,CAAZ;MAAwB,CAAtC,qBADF;KAEK,CAFL,MAD2B,EAA7B;GAIK,CAJL,MAKM,EANR,CAQI,CATN,CAgBI,EALJJ,oBAEO,MAFP,cAEO,CADLS,aAAsCC,gBAAtC,EAAsC;IAA9BC,IAAI,EAAER;EAAwB,CAAtC,EAA4B,IAA5B,EAA4B,CAA5B,EAA4B,QAA5B,CACK,aAFP,CAKI,EAFJH,oBAAuF,QAAvF,EAAuF;IAA/EY,EAAE,EAAC,MAA4E;IAApEL,OAAK,2CAAOM,cAAP,GAAqB,KAAQA,cAAR,GAAsB,EAA3C;EAA+D,CAAvF,EAA0E,MAA1E,CAEI,EADJb,oBAAiD,QAAjD,EAAiD;IAAzCY,EAAE,EAAC,OAAsC;IAA7BL,OAAK,sCAAEC,gBAAF;EAAwB,CAAjD,EAAoC,MAApC,CACI,CAjBN","names":["class","style","_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","y","key","x","onClick","$options","_createVNode","_component_stone","type","id","currentStoneId"],"sourceRoot":"","sources":["C:\\Users\\kazu\\Study\\VUEJS\\CLI\\othellogame2\\src\\components\\PlayOthello.vue"],"sourcesContent":["<template>\n  <div class=\"hello\" style=\"padding:2% 0%;\">\n    <div class=\"centerMiddle\">\n      <table class=\"inner\" style=\"margin-bottom:10px\">\n        <tr v-for=\"y in size\" :key=\"y\">\n          <td v-for=\"x in size\" @click=\"onStoneSet(x, y)\" :key=\"x\">\n            <stone :type=\"getStone(x, y)\"></stone>\n          </td>\n        </tr>\n      </table>\n\n    </div>\n    \n    <span style=\"background:#d8bfd8;padding:20px 20px; margin:50px;border-radius:8px;\">\n      <stone :type=\"currentStoneId\"></stone> の番\n    </span>\n    <button id=\"skip\" @click=\"this.currentStoneId = this.currentStoneId * -1\">スキップ</button>\n    <button id=\"reset\" @click=\"reset()\">リセット</button>\n  </div>\n</template>\n\n<script>\nimport stoneComponent from \"./stoneComponent.vue\"\n\nexport default {\n  name: 'HelloWorld',\n  props: {\n    msg: String\n  },\n  components: {\n    stone: stoneComponent,\n  },\n  data(){\n    return{\n      size: 14,\n      stones: [],\n      currentStoneId: -1,    // -1 => 黒い石、1 => 白い石,\n      result:0,\n      init:0,\n    }\n  },\n  methods:{\n    initStone() {\n      var stones = [];\n      var size = this.size;\n      this.init = 1;\n      for(var x = 0 ; x < size ; x++) {\n        var stoneLine = [];\n        for(var y = 0 ; y < size ; y++) {\n          if( (x==6 && y==6) || (x==7 && y==7) ){\n            stoneLine.push(-1);  \n          }else if( (x==7 && y==6) || (x==6 && y==7) ){\n            stoneLine.push(1);\n          }else{\n            stoneLine.push(0);\n          }\n        }\n        stones.push(stoneLine);\n      }\n      this.stones = stones;\n    },\n\n    getStone(x, y) {\n      return this.stones[x-1][y-1];        \n    },\n\n    reset() {\n      var stones = [];\n      var size = this.size;\n      this.init = 1;\n      for(var x = 0 ; x < size ; x++) {\n        var stoneLine = [];\n        for(var y = 0 ; y < size ; y++) {\n          if( (x==6 && y==6) || (x==7 && y==7) ){\n            stoneLine.push(-1);  \n          }else if( (x==7 && y==6) || (x==6 && y==7) ){\n            stoneLine.push(1);\n          }else{\n            stoneLine.push(0);\n          }\n        }\n        stones.push(stoneLine);\n      }\n      this.stones = stones;\n    },\n\n    copyStone() {     \n//      return JSON.parse(JSON.stringify(this.stones));\n      return this.stones;\n    },\n\n    changeStone(x, y) { // 同じ色で挟まれた場合にひっくり返す\n      var movingCollection = [    // 移動する方向\n        {x: -1, y: -1}, // 左上\n        {x:  0, y: -1}, // 上\n        {x:  1, y: -1}, // 右上\n        {x:  1, y:  0}, // 右\n        {x:  1, y:  1}, // 右下\n        {x:  0, y:  1}, // 下\n        {x: -1, y:  1}, // 左下\n        {x: -1, y:  0}, // 左\n      ];\n      var baseX = x - 1;  // 置かれた石の座標：X\n      var baseY = y - 1;  // 置かれた石の座標：Y\n      var changingStoneId = this.currentStoneId * -1;    // ひっくり返す石\n\n      for(var i = 0 ; i < movingCollection.length ; i++) {    //movingCollection.length:8\n        var moving = movingCollection[i];\n        var checkingX = baseX;\n        var checkingY = baseY;\n        var changingPositions = [];     // ひっくり返す（かもしれない）座標\n\n        innerLoop:\n        for(var j = 0 ; j < this.size ; j++) {  //置いた場所の周囲をチェック\n          checkingX += moving.x;   // チェックする場所を移動\n          checkingY += moving.y;   // チェックする場所を移動\n          if( checkingX < 0 ||\n              checkingY < 0 ||\n              checkingX >= this.size ||\n              checkingY >= this.size) {   // 盤上を出た\n          break innerLoop;\n          }\n          var checkingStoneId = this.stones[checkingX][checkingY];\n          if(checkingStoneId == this.currentStoneId) {   // 自分の色だった場合\n            var newStones = this.copyStone();\n            for(var k = 0 ; k < changingPositions.length ; k++) {\n              var changingPosition = changingPositions[k];\n              var changingX = changingPosition.x;\n              var changingY = changingPosition.y;\n              newStones[changingX][changingY] = this.currentStoneId;\n            }\n            this.stones = newStones;\n            break innerLoop;\n          }else if(checkingStoneId == changingStoneId) {   // 相手の色だった場合\n            changingPositions.push({x: checkingX, y: checkingY});\n          }else{    // 空白の場合\n            break innerLoop;\n          }\n        }\n      }\n    },\n\n    checkStone(x, y) { // 同じ色で挟まれた場合にひっくり返す\n      var movingCollection = [    // 移動する方向\n        {x: -1, y: -1}, // 左上\n        {x:  0, y: -1}, // 上\n        {x:  1, y: -1}, // 右上\n        {x:  1, y:  0}, // 右\n        {x:  1, y:  1}, // 右下\n        {x:  0, y:  1}, // 下\n        {x: -1, y:  1}, // 左下\n        {x: -1, y:  0}, // 左\n      ];\n      var baseX = x - 1;  // 置かれた石の座標：X\n      var baseY = y - 1;  // 置かれた石の座標：Y\n      var changingStoneId = this.currentStoneId * -1;    // ひっくり返す石\n      var sameColor = 0;\n      var differentColor = 0;\n\n      for(var i = 0 ; i < movingCollection.length ; i++) {    //movingCollection.length:8\n        var moving = movingCollection[i];\n        var checkingX = baseX;\n        var checkingY = baseY;\n\n        innerLoop:\n        for(var j = 0 ; j < this.size ; j++) {  //置いた場所の周囲をチェック\n          checkingX += moving.x;   // チェックする場所を移動\n          checkingY += moving.y;   // チェックする場所を移動\n          if( checkingX < 0 ||\n              checkingY < 0 ||\n              checkingX >= this.size ||\n              checkingY >= this.size) {   // 盤上を出た\n              if(sameColor != 1){\n                differentColor = 0;\n              }\n          break innerLoop;\n          }\n\n          var checkingStoneId = this.stones[checkingX][checkingY];\n          if(checkingStoneId == this.currentStoneId) {   // 自分の色だった場合\n            if(differentColor == 1){\n              sameColor = 1;\n            }else{\n              differentColor = 0;  \n            }\n            break innerLoop;\n          }else if(checkingStoneId == changingStoneId) {   // 相手の色だった場合\n            differentColor = 1;\n          }\n          else{    // 空白の場合\n            if( (differentColor!=1) || (sameColor!=1) ){\n              differentColor = 0;\n              sameColor = 0;\n            }\n            break innerLoop;\n          }\n        }\n      }\n      if( (sameColor == 1)  &&  (differentColor == 1) ){\n        this.result = 1;\n      }else{\n        this.result = 0;\n      }\n      return this.result;\n    },\n\n    stoneCounts() {\n      var counts = {\n          black: 0,\n          white: 0,\n          total: 0\n      };\n      var size = this.size;\n      for(var x = 0 ; x < size ; x++) {\n        for(var y = 0 ; y < size ; y++) {\n          var stoneId = this.stones[x][y];\n          if(stoneId == -1 || stoneId == 1) {\n            if(stoneId == -1) {\n              counts.black++;\n            } else if(stoneId == 1) {\n              counts.white++;\n            }\n            counts.total++;\n          }\n        }\n      }\n      return counts;\n    },\n\n    onStoneSet(x, y) {\n      this.init = 0;\n      var chechResult = this.checkStone(x, y);\n      if(chechResult == 1){\n        if(this.stones[x-1][y-1] == 0) {    // 選んだ場所が空白かどうか？\n          var newStones = this.copyStone();\n          newStones[x-1][y-1] = this.currentStoneId;\n          this.stones = newStones;      \n            this.changeStone(x, y);\n          this.currentStoneId *= -1;  // 白黒交代\n          var fullCount = this.size * this.size;\n          var stoneCounts = this.stoneCounts();\n          if(stoneCounts.total == fullCount) {\n            if(stoneCounts.black > stoneCounts.white) {\n              alert(\"黒の勝ち\");\n            } else if(stoneCounts.black < stoneCounts.white) {\n              alert(\"白の勝ち\");\n            } else {\n              alert(\"引き分け\");\n            }\n          }\n//        } else {\n//          alert('すでに石が置かれています');\n        }\n      }\n    },\n  },\n\n  created:function() {\n      this.initStone();\n  },\n}//methods\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n  table {\n    border-collapse: collapse;\n  }\n\n  td {\n    border: 3px solid black;\n    background: #009E54;\n    width: 50px;\n    height: 50px;\n    text-align: center;\n    vertical-align: middle;\n  }\n\n  .hello{\n    width:800px; height:200px; margin:auto; margin-top: 0%;\n  }\n\n  #skip{\n    background:blue;\n    color:white;\n    padding:20px 20px;\n    border-radius:8px;\n  }  \n\n  #reset{\n    background:greenyellow;\n    color:black;\n    padding:20px 20px;\n    border-radius:8px;\n    margin-left:50px\n  }  \n\n</style>\n"]}]}